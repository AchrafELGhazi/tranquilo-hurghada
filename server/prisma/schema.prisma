generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    GUEST
    HOST
    ADMIN
}

enum PaymentMethod {
    BANK_TRANSFER
    PAYMENT_ON_ARRIVAL
}

enum BookingStatus {
    PENDING
    CONFIRMED
    CANCELLED
    REJECTED
    COMPLETED
}

enum VillaStatus {
    AVAILABLE
    UNAVAILABLE
    MAINTENANCE
}

enum ServiceCategory {
    INCLUDED
    ADVENTURE
    WELLNESS
    CULTURAL
    TRANSPORT
    CUSTOM
}

enum ServiceDifficulty {
    EASY
    MODERATE
    CHALLENGING
}

model User {
    id          String    @id @default(cuid())
    email       String    @unique
    password    String
    fullName    String
    phone       String?
    dateOfBirth DateTime?
    role        Role      @default(GUEST)
    isActive    Boolean   @default(true)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    ownedVillas       Villa[]   @relation("VillaOwner")
    guestBookings     Booking[] @relation("BookingGuest")
    confirmedBookings Booking[] @relation("BookingConfirmedBy")
    cancelledBookings Booking[] @relation("BookingCancelledBy")

    @@map("users")
}

model Villa {
    id            String      @id @default(cuid())
    title         String
    description   String?
    address       String
    city          String
    country       String      @default("Egypt")
    pricePerNight Decimal     @db.Decimal(10, 2)
    maxGuests     Int
    bedrooms      Int
    bathrooms     Int
    amenities     String[]
    images        String[]
    status        VillaStatus @default(AVAILABLE)
    isActive      Boolean     @default(true)
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt

    ownerId  String
    owner    User      @relation("VillaOwner", fields: [ownerId], references: [id], onDelete: Cascade)
    bookings Booking[]
    services Service[]

    @@map("villas")
}

model Service {
    id              String            @id @default(cuid())
    title           String
    description     String
    longDescription String?
    category        ServiceCategory
    price           Decimal           @db.Decimal(10, 2)
    duration        String
    difficulty      ServiceDifficulty?
    maxGroupSize    Int?
    highlights      String[]
    included        String[]
    image           String?
    isActive        Boolean           @default(true)
    isFeatured      Boolean           @default(false)
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt

    villaId String?
    villa   Villa?  @relation(fields: [villaId], references: [id], onDelete: Cascade)

    bookingServices BookingService[]

    @@map("services")
}

model Booking {
    id                 String        @id @default(cuid())
    checkIn            DateTime
    checkOut           DateTime
    totalGuests        Int
    totalPrice         Decimal       @db.Decimal(10, 2)
    servicesTotal      Decimal       @db.Decimal(10, 2) @default(0)
    grandTotal         Decimal       @db.Decimal(10, 2)
    status             BookingStatus @default(PENDING)
    paymentMethod      PaymentMethod
    isPaid             Boolean       @default(false)
    notes              String?
    confirmedAt        DateTime?
    cancelledAt        DateTime?
    rejectedAt         DateTime?
    completedAt        DateTime?
    cancellationReason String?
    rejectionReason    String?
    createdAt          DateTime      @default(now())
    updatedAt          DateTime      @updatedAt

    guestId String
    guest   User   @relation("BookingGuest", fields: [guestId], references: [id], onDelete: Cascade)

    villaId String
    villa   Villa  @relation(fields: [villaId], references: [id], onDelete: Cascade)

    confirmedById String?
    confirmedBy   User?   @relation("BookingConfirmedBy", fields: [confirmedById], references: [id])

    cancelledById String?
    cancelledBy   User?   @relation("BookingCancelledBy", fields: [cancelledById], references: [id])

    bookingServices BookingService[]

    @@map("bookings")
}

model BookingService {
    id               String   @id @default(cuid())
    quantity         Int      @default(1)
    unitPrice        Decimal  @db.Decimal(10, 2)
    totalPrice       Decimal  @db.Decimal(10, 2)
    scheduledDate    DateTime?
    scheduledTime    String?
    specialRequests  String?
    numberOfGuests   Int?
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    bookingId String
    booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

    serviceId String
    service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

    @@unique([bookingId, serviceId])
    @@map("booking_services")
}