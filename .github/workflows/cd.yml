# name: Continuous Deployment

# on:
#   push:
#     branches: [ main ]
#   workflow_run:
#     workflows: ["Continuous Integration"]
#     types:
#       - completed
#     branches: [ main ]

# env:
#   NODE_VERSION: '18'
#   REGISTRY: ghcr.io
#   IMAGE_NAME: ${{ github.repository }}

# jobs:
#   # Job 1: Deploy to Staging
#   deploy-staging:
#     name: Deploy to Staging
#     runs-on: ubuntu-latest
#     if: github.ref == 'refs/heads/main' && github.event.workflow_run.conclusion == 'success'
#     environment:
#       name: staging

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ env.NODE_VERSION }}

#       - name: Log in to Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Extract metadata
#         id: meta
#         uses: docker/metadata-action@v5
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#           tags: |
#             type=ref,event=branch
#             type=sha,prefix={{branch}}-
#             type=raw,value=staging

#       - name: Build and push backend Docker image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./server
#           file: ./server/Dockerfile
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max

#       - name: Deploy to Railway (Backend)
#         run: |
#           curl -X POST \
#             -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
#             -H "Content-Type: application/json" \
#             -d '{
#               "environmentId": "${{ secrets.RAILWAY_STAGING_ENV_ID }}",
#               "serviceId": "${{ secrets.RAILWAY_BACKEND_SERVICE_ID }}",
#               "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging"
#             }' \
#             https://backboard.railway.app/graphql/v2

#       - name: Deploy Frontend to Vercel
#         uses: amondnet/vercel-action@v25
#         with:
#           vercel-token: ${{ secrets.VERCEL_TOKEN }}
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
#           vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
#           working-directory: ./web
#           vercel-args: '--prod --env REACT_APP_API_URL=${{ secrets.STAGING_API_URL }}'

#       - name: Run database migrations
#         env:
#           DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
#         run: |
#           cd server
#           npm ci
#           npx prisma migrate deploy

#       - name: Run smoke tests against staging
#         env:
#           API_URL: ${{ secrets.STAGING_API_URL }}
#           FRONTEND_URL: ${{ secrets.STAGING_FRONTEND_URL }}
#         run: |
#           # Simple health check
#           curl -f $API_URL/health || exit 1
#           curl -f $FRONTEND_URL || exit 1

#       - name: Notify Slack on staging deployment
#         if: always()
#         uses: rtCamp/action-slack-notify@v2
#         env:
#           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
#           SLACK_MESSAGE: |
#             üöÄ Staging Deployment Complete
#             üì¶ Version: ${{ github.sha }}
#             üåê Frontend: ${{ secrets.STAGING_FRONTEND_URL }}
#             üîó API: ${{ secrets.STAGING_API_URL }}

#   # Job 2: Deploy to Production
#   deploy-production:
#     name: Deploy to Production
#     runs-on: ubuntu-latest
#     needs: deploy-staging
#     environment:
#       name: production
#     if: github.ref == 'refs/heads/main'

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ env.NODE_VERSION }}

#       - name: Log in to Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Extract metadata for production
#         id: meta
#         uses: docker/metadata-action@v5
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#           tags: |
#             type=ref,event=branch
#             type=sha,prefix={{branch}}-
#             type=raw,value=production
#             type=raw,value=latest

#       - name: Build and push production backend image
#         uses: docker/build-push-action@v5
#         with:
#           context: ./server
#           file: ./server/Dockerfile
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max

#       - name: Deploy to Railway (Production Backend)
#         run: |
#           curl -X POST \
#             -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
#             -H "Content-Type: application/json" \
#             -d '{
#               "environmentId": "${{ secrets.RAILWAY_PROD_ENV_ID }}",
#               "serviceId": "${{ secrets.RAILWAY_BACKEND_SERVICE_ID }}",
#               "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:production"
#             }' \
#             https://backboard.railway.app/graphql/v2

#       - name: Deploy Frontend to Vercel (Production)
#         uses: amondnet/vercel-action@v25
#         with:
#           vercel-token: ${{ secrets.VERCEL_TOKEN }}
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
#           vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
#           working-directory: ./web
#           vercel-args: '--prod --env REACT_APP_API_URL=${{ secrets.PROD_API_URL }}'

#       - name: Run production database migrations
#         env:
#           DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
#         run: |
#           cd server
#           npm ci
#           npx prisma migrate deploy

#       - name: Run production smoke tests
#         env:
#           API_URL: ${{ secrets.PROD_API_URL }}
#           FRONTEND_URL: ${{ secrets.PROD_FRONTEND_URL }}
#         run: |
#           # Health checks
#           curl -f $API_URL/health || exit 1
#           curl -f $FRONTEND_URL || exit 1
          
#           # Additional production checks
#           curl -f $API_URL/api/v1/health || exit 1

#       - name: Create GitHub Release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: v${{ github.run_number }}
#           release_name: Release v${{ github.run_number }}
#           body: |
#             üöÄ Production Deployment
            
#             **Changes in this release:**
#             ${{ github.event.head_commit.message }}
            
#             **Deployed Services:**
#             - üåê Frontend: ${{ secrets.PROD_FRONTEND_URL }}
#             - üîó API: ${{ secrets.PROD_API_URL }}
            
#             **Commit:** ${{ github.sha }}
#           draft: false
#           prerelease: false

#       - name: Notify team on production deployment
#         if: always()
#         uses: rtCamp/action-slack-notify@v2
#         env:
#           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
#           SLACK_MESSAGE: |
#             üéâ Production Deployment Successful!
#             üì¶ Version: v${{ github.run_number }}
#             üåê Frontend: ${{ secrets.PROD_FRONTEND_URL }}
#             üîó API: ${{ secrets.PROD_API_URL }}
#             üë®‚Äçüíª Deployed by: ${{ github.actor }}

#   # Job 3: Rollback (Manual Trigger)
#   rollback:
#     name: Rollback Production
#     runs-on: ubuntu-latest
#     environment:
#       name: production
#     if: github.event_name == 'workflow_dispatch'

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Rollback Railway deployment
#         run: |
#           # This would trigger a rollback to previous version
#           echo "Rollback process would be implemented here"
#           # Typically involves calling Railway API to deploy previous image

#       - name: Notify rollback
#         if: always()
#         uses: rtCamp/action-slack-notify@v2
#         env:
#           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
#           SLACK_MESSAGE: |
#             ‚ö†Ô∏è Production Rollback Initiated
#             üë®‚Äçüíª Triggered by: ${{ github.actor }}
#             üîÑ Rolling back to previous stable version